package com.rivada.events.contract;


import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.*;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.*;
import java.util.concurrent.Callable;

import static java.util.Objects.isNull;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.2.
 */
@SuppressWarnings("rawtypes")
public class RivadaCoreContract extends Contract {
    public static final String BINARY = "608060405234801561001057600080fd5b5061385e806100206000396000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c8063715018a611610125578063b6b55f25116100ad578063f74d54801161007c578063f74d5480146104a9578063fb5e556c146104bc578063fc0c546a146104cf578063fe78021b146104e2578063fe917ddb146104f557600080fd5b8063b6b55f251461045d578063c78bd53214610470578063df35603214610483578063f2fde38b1461049657600080fd5b80638da5cb5b116100f45780638da5cb5b146104005780638e1e34b714610411578063996dac0b14610424578063a124a64014610437578063adef0a4c1461044a57600080fd5b8063715018a6146103ca57806375af65d1146103d25780637ccb2bd8146103e5578063853828b6146103f857600080fd5b80633f4a7fa7116101a857806356a1c7011161017757806356a1c7011461034e5780636531f0a3146103615780636e31d82e146103745780636e974611146103945780636f14f6e9146103b757600080fd5b80633f4a7fa7146102da57806340b9c36f146102ed5780634e3ad80f146102f557806352bbcbc31461032057600080fd5b806328810fe7116101e457806328810fe71461028c5780632e1a7d4d146102a157806335ee5f87146102b4578063379607f5146102c757600080fd5b80630385aaec1461021657806304dc88b61461022b578063119265bb146102585780631f07cb321461026b575b600080fd5b6102296102243660046129d4565b610508565b005b606d5461024090600160a01b900461ffff1681565b60405161ffff90911681526020015b60405180910390f35b610229610266366004612a57565b61082a565b61027e610279366004612a92565b610854565b60405190815260200161024f565b606d5461024090600160b01b900461ffff1681565b6102296102af366004612aef565b61088a565b61027e6102c2366004612b08565b6109fe565b6102296102d5366004612aef565b610a29565b6102406102e8366004612b08565b610b9e565b610229610c16565b606d54610308906001600160a01b031681565b6040516001600160a01b03909116815260200161024f565b61033361032e366004612b3c565b610dae565b6040805193845260208401929092529082015260600161024f565b61022961035c366004612ba5565b610e9f565b61022961036f366004612da0565b610f15565b610387610382366004612ecb565b611140565b60405161024f9190612f3a565b6103a76103a2366004612b08565b611201565b604051901515815260200161024f565b6102406103c5366004612b08565b61122c565b610229611287565b606c54610308906001600160a01b031681565b6102296103f3366004612f4d565b61129b565b6102296114c7565b6033546001600160a01b0316610308565b61030861041f366004612b08565b611640565b61027e610432366004612f9a565b611677565b610229610445366004612ba5565b6116b9565b610240610458366004612b08565b611730565b61022961046b366004612aef565b61174e565b61022961047e366004612b08565b6119e8565b61027e610491366004612b08565b611bb1565b6102296104a4366004612ba5565b611bc3565b606b54610308906001600160a01b031681565b6102296104ca3660046130a0565b611c39565b606554610308906001600160a01b031681565b6103086104f0366004612b08565b611dc9565b6103a7610503366004612b08565b611ddb565b3360009081526067602052604090205460ff161561055d5760405162461bcd60e51b815260206004820152600d60248201526c1b1a5b9ad959081dd85b1b195d609a1b60448201526064015b60405180910390fd5b428263ffffffff1610156105a95760405162461bcd60e51b81526020600482015260136024820152721d1a5b59481b1a5b5a5d08195e18d959591959606a1b6044820152606401610554565b606b5473__$71ab0405b8afb84119013c3ecbcae7cdfc$__906307b831e4906001600160a01b03166105dc338787610854565b846040518463ffffffff1660e01b81526004016105fb9392919061316a565b602060405180830381865af4158015610618573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063c919061319a565b61067a5760405162461bcd60e51b815260206004820152600f60248201526e77726f6e67207369676e617475726560881b6044820152606401610554565b60668360405161068a91906131bc565b9081526040519081900360200190205460ff161561072e5760006001600160a01b03166066846040516106bd91906131bc565b908152604051908190036020019020546001600160a01b0361010090910416146107295760405162461bcd60e51b815260206004820152601860248201527f7573657220616c726561647920686176652077616c6c657400000000000000006044820152606401610554565b610761565b600160668460405161074091906131bc565b908152604051908190036020019020805491151560ff199092169190911790555b3360668460405161077291906131bc565b90815260408051602092819003830181208054610100600160a81b0319166101006001600160a01b03969096169590950294909417909355828101815260018084528284018781523360009081526067909452919092208351815460ff1916901515178155905190918201906107e8908261325a565b509050507f870a9eb3ca6b564345e2c752ebf250799138935518d3c546be1fc37bd426f263833360405161081d929190613319565b60405180910390a1505050565b610832611ded565b606d805461ffff909216600160a01b0261ffff60a01b19909216919091179055565b600083838360405160200161086b93929190613343565b6040516020818303038152906040528051906020012090509392505050565b600081116108c85760405162461bcd60e51b815260206004820152600b60248201526a1e995c9bc8185b5bdd5b9d60aa1b6044820152606401610554565b3360009081526067602090815260408083208151808301909252805460ff16151582526001810180549293919291840191610902906131d8565b80601f016020809104026020016040519081016040528092919081815260200182805461092e906131d8565b801561097b5780601f106109505761010080835404028352916020019161097b565b820191906000526020600020905b81548152906001019060200180831161095e57829003601f168201915b505050505081525050905080600001516109a75760405162461bcd60e51b81526004016105549061337d565b81606682602001516040516109bc91906131bc565b90815260200160405180910390206001015410156109ec5760405162461bcd60e51b8152600401610554906133a6565b6109fa816020015183611e47565b5050565b6000606682604051610a1091906131bc565b9081526020016040518091039020600101549050919050565b3360009081526069602090815260408083208151808301909252805460ff16151582526001810180549293919291840191610a63906131d8565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8f906131d8565b8015610adc5780601f10610ab157610100808354040283529160200191610adc565b820191906000526020600020905b815481529060010190602001808311610abf57829003601f168201915b50505050508152505090508060000151610b085760405162461bcd60e51b81526004016105549061337d565b60688160200151604051610b1c91906131bc565b9081526040519081900360200190205460ff16610b4b5760405162461bcd60e51b8152600401610554906133d0565b8160688260200151604051610b6091906131bc565b9081526020016040518091039020600101541015610b905760405162461bcd60e51b8152600401610554906133a6565b6109fa816020015183611efe565b606c54604051633f4a7fa760e01b81526000916001600160a01b031690633f4a7fa790610bcf9085906004016133fc565b602060405180830381865afa158015610bec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c10919061340f565b92915050565b3360009081526067602052604090205460ff16610c455760405162461bcd60e51b81526004016105549061337d565b3360009081526067602052604081206001018054610c62906131d8565b80601f0160208091040260200160405190810160405280929190818152602001828054610c8e906131d8565b8015610cdb5780601f10610cb057610100808354040283529160200191610cdb565b820191906000526020600020905b815481529060010190602001808311610cbe57829003601f168201915b505050505090506000606682604051610cf491906131bc565b90815260408051602092819003830181208054610100600160a81b0319166101006001600160a01b0396909616959095029490941790935582810181526000808452815180840183528181528385019081523382526067909352208251815460ff191690151517815590516001820190610d6e908261325a565b509050507f9fa5e43a3ceeb04b8052ef9cf3438b166bd69976a430fd7dafa5940e0d0173628133604051610da3929190613319565b60405180910390a150565b60008080610dc06127106103e8613442565b610dd061ffff8616612710613459565b610de063ffffffff891688613442565b610dea9190613442565b610df4919061346c565b9250606687604051610e0691906131bc565b908152602001604051809103902060010154831115610e4457606687604051610e2f91906131bc565b90815260200160405180910390206001015492505b606d5461271090610e6090600160a01b900461ffff1685613442565b610e6a919061346c565b606d5490925061271090610e8990600160b01b900461ffff1685613442565b610e93919061346c565b90509450945094915050565b610ea7611ded565b6001600160a01b038116610ef35760405162461bcd60e51b81526020600482015260136024820152727a65726f207369676e6572206164647265737360681b6044820152606401610554565b606b80546001600160a01b0319166001600160a01b0392909216919091179055565b85518751148015610f27575084518751145b8015610f34575083518751145b8015610f41575082518751145b610f865760405162461bcd60e51b81526020600482015260166024820152756c656e67746873206d75737420626520657175616c7360501b6044820152606401610554565b428263ffffffff161015610fd25760405162461bcd60e51b81526020600482015260136024820152721d1a5b59481b1a5b5a5d08195e18d959591959606a1b6044820152606401610554565b606b5473__$71ab0405b8afb84119013c3ecbcae7cdfc$__906307b831e4906001600160a01b03166110098b8b8b8b8b8b8b611677565b846040518463ffffffff1660e01b81526004016110289392919061316a565b602060405180830381865af4158015611045573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611069919061319a565b6110a75760405162461bcd60e51b815260206004820152600f60248201526e77726f6e67207369676e617475726560881b6044820152606401610554565b60608060608060606110bc8c8c8c8c8c611fdd565b606d5493995093975090955093509091506110e0906001600160a01b0316846123fb565b6110ea33836123fb565b7fb451e0e4339d5dd6fa5ef426bbca63dd6b8b0a2b0dd8f14b39cd96cf32bb60dd8d8d8d8d888a8989896040516111299998979695949392919061351c565b60405180910390a150505050505050505050505050565b606081516001600160401b0381111561115b5761115b612906565b604051908082528060200260200182016040528015611184578160200160208202803683370190505b50905060005b82518110156111fb5760668382815181106111a7576111a7613609565b60200260200101516040516111bc91906131bc565b9081526020016040518091039020600101548282815181106111e0576111e0613609565b60209081029190910101526111f48161361f565b905061118a565b50919050565b600060668260405161121391906131bc565b9081526040519081900360200190205460ff1692915050565b606c546040516000916001600160a01b0316906380cb53d5906066906112539086906131bc565b908152604051908190036020018120600201546001600160e01b031960e084901b168252610bcf9160040190815260200190565b61128f611ded565b6112996000612462565b565b6112a3611ded565b6001600160a01b0381166112f15760405162461bcd60e51b81526020600482015260156024820152747a65726f2070726f7669646572206164647265737360581b6044820152606401610554565b60688260405161130191906131bc565b9081526040519081900360200190205460ff16156113615760405162461bcd60e51b815260206004820152601b60248201527f70726f766964657220616c7265616479207265676973746572656400000000006044820152606401610554565b6001600160a01b03811660009081526069602052604090205460ff16156113c25760405162461bcd60e51b81526020600482015260156024820152741dd85b1b195d08185b1c9958591e481b1a5b9ad959605a1b6044820152606401610554565b604080518082018252600180825260208083018681526001600160a01b038616600090815260699092529390208251815460ff1916901515178155925191929190820190611410908261325a565b50905050600160688360405161142691906131bc565b908152604051908190036020018120805492151560ff199093169290921790915581906068906114579085906131bc565b90815260405190819003602001812080546001600160a01b039390931661010002610100600160a81b0319909316929092179091557f5d19a7f3e6184970213ea7c3dc69780163c5ad1c0a7ba728bcf48febee2eb83c906114bb9084908490613319565b60405180910390a15050565b3360009081526067602090815260408083208151808301909252805460ff16151582526001810180549293919291840191611501906131d8565b80601f016020809104026020016040519081016040528092919081815260200182805461152d906131d8565b801561157a5780601f1061154f5761010080835404028352916020019161157a565b820191906000526020600020905b81548152906001019060200180831161155d57829003601f168201915b505050505081525050905080600001516115a65760405162461bcd60e51b81526004016105549061337d565b6000606682602001516040516115bc91906131bc565b9081526020016040518091039020600101541161160a5760405162461bcd60e51b815260206004820152600c60248201526b7a65726f2062616c616e636560a01b6044820152606401610554565b61163d81602001516066836020015160405161162691906131bc565b908152602001604051809103902060010154611e47565b50565b600060668260405161165291906131bc565b908152604051908190036020019020546001600160a01b036101009091041692915050565b6000878787878787876040516020016116969796959493929190613638565b604051602081830303815290604052805190602001209050979650505050505050565b6116c1611ded565b6001600160a01b03811661170e5760405162461bcd60e51b81526020600482015260146024820152737a65726f206661726d696e67206164647265737360601b6044820152606401610554565b606d80546001600160a01b0319166001600160a01b0392909216919091179055565b600061173b82610b9e565b6117448361122c565b610c1091906136f8565b3360009081526067602052604090205460ff1661177d5760405162461bcd60e51b81526004016105549061337d565b6065546040516370a0823160e01b815233600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa1580156117c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e9919061371a565b10156118075760405162461bcd60e51b8152600401610554906133a6565b3360009081526067602052604081206001018054611824906131d8565b80601f0160208091040260200160405190810160405280929190818152602001828054611850906131d8565b801561189d5780601f106118725761010080835404028352916020019161189d565b820191906000526020600020905b81548152906001019060200180831161188057829003601f168201915b5050606c546040519495506001600160a01b03169363b4c299529350859250606691506118cb9083906131bc565b908152604051908190036020018120600101546001600160e01b031960e085901b1682526118fe92918790600401613733565b600060405180830381600087803b15801561191857600080fd5b505af115801561192c573d6000803e3d6000fd5b505050508160668260405161194191906131bc565b908152602001604051809103902060010160008282546119619190613758565b925050819055507f19daa1b8ef1d170648008e3607d0a9bdf110b6f269d6ca4a486d2c82911dc63f81338460668560405161199c91906131bc565b9081526020016040518091039020600101546119b786611730565b6040516119c895949392919061376b565b60405180910390a16065546109fa906001600160a01b03163330856124b4565b6119f0611ded565b606881604051611a0091906131bc565b9081526040519081900360200190205460ff161515600114611a345760405162461bcd60e51b8152600401610554906133d0565b6000606882604051611a4691906131bc565b9081526020016040518091039020600101541115611a8957611a8981606883604051611a7291906131bc565b908152602001604051809103902060010154611efe565b6000606882604051611a9b91906131bc565b90815260408051602092819003830181205481830183526000808352835180860185528181528584019081526101009092046001600160a01b03168082526069909552929092208151815460ff19169015151781559151929350916001820190611b05908261325a565b509050506000606883604051611b1b91906131bc565b908152604051908190036020018120805492151560ff1990931692909217909155600090606890611b4d9085906131bc565b90815260405190819003602001812080546001600160a01b039390931661010002610100600160a81b0319909316929092179091557f3aae2f1dd38b83cef94689cacc617679275ade8019db4af10ce0cae9f338401b906114bb9084908490613319565b6000606882604051610a1091906131bc565b611bcb611ded565b6001600160a01b038116611c305760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610554565b61163d81612462565b600054610100900460ff1615808015611c595750600054600160ff909116105b80611c735750303b158015611c73575060005460ff166001145b611cd65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610554565b6000805460ff191660011790558015611cf9576000805461ff0019166101001790555b606580546001600160a01b03808a166001600160a01b031992831617909255606b8054898416908316179055606c80548884169216919091179055606d805461ffff858116600160b01b0261ffff60b01b19918816600160a01b026001600160b01b0319909316948916949094179190911716919091179055611d7a612525565b8015611dc0576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b600060688260405161165291906131bc565b600060688260405161121391906131bc565b6033546001600160a01b031633146112995760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610554565b80606683604051611e5891906131bc565b90815260200160405180910390206001016000828254611e789190613459565b925050819055507fbadf28ada6fabb5ebc3bfedb863e28546056c869af9c3638898b8d06dc7fa7d0823383606686604051611eb391906131bc565b908152602001604051809103902060010154611ece87611730565b604051611edf95949392919061376b565b60405180910390a16065546109fa906001600160a01b03163383612554565b80606883604051611f0f91906131bc565b90815260200160405180910390206001016000828254611f2f9190613459565b925050819055507f72f6bf1bec276ec35226dd14c6846b2a9e3932751965ef5a606e3fb3b7572dc582606884604051611f6891906131bc565b90815260405190819003602001812054611f9792916001600160a01b03610100909204919091169085906137af565b60405180910390a16109fa606883604051611fb291906131bc565b908152604051908190036020019020546065546001600160a01b039081169161010090041683612554565b606080606080606088516001600160401b03811115611ffe57611ffe612906565b604051908082528060200260200182016040528015612027578160200160208202803683370190505b50945088516001600160401b0381111561204357612043612906565b60405190808252806020026020018201604052801561206c578160200160208202803683370190505b50935088516001600160401b0381111561208857612088612906565b6040519080825280602002602001820160405280156120b1578160200160208202803683370190505b50925088516001600160401b038111156120cd576120cd612906565b6040519080825280602002602001820160405280156120f6578160200160208202803683370190505b50915088516001600160401b0381111561211257612112612906565b60405190808252806020026020018201604052801561213b578160200160208202803683370190505b50905060005b89518110156123ed5760008b828151811061215e5761215e613609565b6020026020010151905060008b838151811061217c5761217c613609565b6020026020010151905060008b848151811061219a5761219a613609565b6020026020010151905060008b85815181106121b8576121b8613609565b6020026020010151905060008b86815181106121d6576121d6613609565b6020908102919091018101516001600160401b0387166000908152606a909252604082205490925081908190819060ff1661230d5760668860405161221b91906131bc565b9081526040519081900360200190205460ff1661226b5760405162461bcd60e51b815260206004820152600e60248201526d1d5cd95c881b9bdd08199bdd5b9960921b6044820152606401610554565b60688760405161227b91906131bc565b9081526040519081900360200190205460ff166122aa5760405162461bcd60e51b8152600401610554906133d0565b60006066896040516122bc91906131bc565b908152602001604051809103902060010154111561230d576122e088888888612584565b6001600160401b038d166000908152606a60205260409020805460ff191660011790559650919450925090505b838e8b8151811061232057612320613609565b602002602001019061ffff16908161ffff1681525050828f8b8151811061234957612349613609565b602002602001018181525050818d8b8151811061236857612368613609565b602002602001018181525050808c8b8151811061238757612387613609565b6020026020010181815250506066886040516123a391906131bc565b9081526020016040518091039020600101548b8b815181106123c7576123c7613609565b602002602001018181525050505050505050505050806123e69061361f565b9050612141565b509550955095509550959050565b6000805b825181101561243f5782818151811061241a5761241a613609565b60200260200101518261242d9190613758565b91506124388161361f565b90506123ff565b50801561245d5760655461245d906001600160a01b03168483612554565b505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b038085166024830152831660448201526064810182905261251f9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612671565b50505050565b600054610100900460ff1661254c5760405162461bcd60e51b8152600401610554906137dd565b611299612746565b6040516001600160a01b03831660248201526044810182905261245d90849063a9059cbb60e01b906064016124e8565b60008060008061259388611730565b90506125a188878784610dae565b604051929650909450925084906066906125bc908b906131bc565b908152602001604051809103902060010160008282546125dc9190613459565b92505081905550836066896040516125f491906131bc565b908152602001604051809103902060020160008282546126149190613758565b909155508290506126258486613459565b61262f9190613459565b60688860405161263f91906131bc565b9081526020016040518091039020600101600082825461265f9190613758565b92505081905550945094509450949050565b60006126c6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166127769092919063ffffffff16565b90508051600014806126e75750808060200190518101906126e7919061319a565b61245d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610554565b600054610100900460ff1661276d5760405162461bcd60e51b8152600401610554906137dd565b61129933612462565b6060612785848460008561278d565b949350505050565b6060824710156127ee5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610554565b600080866001600160a01b0316858760405161280a91906131bc565b60006040518083038185875af1925050503d8060008114612847576040519150601f19603f3d011682016040523d82523d6000602084013e61284c565b606091505b509150915061285d87838387612868565b979650505050505050565b606083156128d75782516000036128d0576001600160a01b0385163b6128d05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610554565b5081612785565b61278583838151156128ec5781518083602001fd5b8060405162461bcd60e51b815260040161055491906133fc565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561294457612944612906565b604052919050565b600082601f83011261295d57600080fd5b81356001600160401b0381111561297657612976612906565b612989601f8201601f191660200161291c565b81815284602083860101111561299e57600080fd5b816020850160208301376000918101602001919091529392505050565b803563ffffffff811681146129cf57600080fd5b919050565b6000806000606084860312156129e957600080fd5b83356001600160401b0380821115612a0057600080fd5b612a0c8783880161294c565b9450612a1a602087016129bb565b93506040860135915080821115612a3057600080fd5b50612a3d8682870161294c565b9150509250925092565b61ffff8116811461163d57600080fd5b600060208284031215612a6957600080fd5b8135612a7481612a47565b9392505050565b80356001600160a01b03811681146129cf57600080fd5b600080600060608486031215612aa757600080fd5b612ab084612a7b565b925060208401356001600160401b03811115612acb57600080fd5b612ad78682870161294c565b925050612ae6604085016129bb565b90509250925092565b600060208284031215612b0157600080fd5b5035919050565b600060208284031215612b1a57600080fd5b81356001600160401b03811115612b3057600080fd5b6127858482850161294c565b60008060008060808587031215612b5257600080fd5b84356001600160401b03811115612b6857600080fd5b612b748782880161294c565b945050612b83602086016129bb565b9250604085013591506060850135612b9a81612a47565b939692955090935050565b600060208284031215612bb757600080fd5b612a7482612a7b565b60006001600160401b03821115612bd957612bd9612906565b5060051b60200190565b600082601f830112612bf457600080fd5b81356020612c09612c0483612bc0565b61291c565b82815260059290921b84018101918181019086841115612c2857600080fd5b8286015b84811015612c595780356001600160401b0381168114612c4c5760008081fd5b8352918301918301612c2c565b509695505050505050565b600082601f830112612c7557600080fd5b81356020612c85612c0483612bc0565b82815260059290921b84018101918181019086841115612ca457600080fd5b8286015b84811015612c595780356001600160401b03811115612cc75760008081fd5b612cd58986838b010161294c565b845250918301918301612ca8565b600082601f830112612cf457600080fd5b81356020612d04612c0483612bc0565b82815260059290921b84018101918181019086841115612d2357600080fd5b8286015b84811015612c5957612d38816129bb565b8352918301918301612d27565b600082601f830112612d5657600080fd5b81356020612d66612c0483612bc0565b82815260059290921b84018101918181019086841115612d8557600080fd5b8286015b84811015612c595780358352918301918301612d89565b600080600080600080600080610100898b031215612dbd57600080fd5b88356001600160401b0380821115612dd457600080fd5b612de08c838d0161294c565b995060208b0135915080821115612df657600080fd5b612e028c838d01612be3565b985060408b0135915080821115612e1857600080fd5b612e248c838d01612c64565b975060608b0135915080821115612e3a57600080fd5b612e468c838d01612c64565b965060808b0135915080821115612e5c57600080fd5b612e688c838d01612ce3565b955060a08b0135915080821115612e7e57600080fd5b612e8a8c838d01612d45565b9450612e9860c08c016129bb565b935060e08b0135915080821115612eae57600080fd5b50612ebb8b828c0161294c565b9150509295985092959890939650565b600060208284031215612edd57600080fd5b81356001600160401b03811115612ef357600080fd5b61278584828501612c64565b600081518084526020808501945080840160005b83811015612f2f57815187529582019590820190600101612f13565b509495945050505050565b602081526000612a746020830184612eff565b60008060408385031215612f6057600080fd5b82356001600160401b03811115612f7657600080fd5b612f828582860161294c565b925050612f9160208401612a7b565b90509250929050565b600080600080600080600060e0888a031215612fb557600080fd5b87356001600160401b0380821115612fcc57600080fd5b612fd88b838c0161294c565b985060208a0135915080821115612fee57600080fd5b612ffa8b838c01612be3565b975060408a013591508082111561301057600080fd5b61301c8b838c01612c64565b965060608a013591508082111561303257600080fd5b61303e8b838c01612c64565b955060808a013591508082111561305457600080fd5b6130608b838c01612ce3565b945060a08a013591508082111561307657600080fd5b506130838a828b01612d45565b92505061309260c089016129bb565b905092959891949750929550565b60008060008060008060c087890312156130b957600080fd5b6130c287612a7b565b95506130d060208801612a7b565b94506130de60408801612a7b565b93506130ec60608801612a7b565b925060808701356130fc81612a47565b915060a087013561310c81612a47565b809150509295509295509295565b60005b8381101561313557818101518382015260200161311d565b50506000910152565b6000815180845261315681602086016020860161311a565b601f01601f19169290920160200192915050565b60018060a01b0384168152826020820152606060408201526000613191606083018461313e565b95945050505050565b6000602082840312156131ac57600080fd5b81518015158114612a7457600080fd5b600082516131ce81846020870161311a565b9190910192915050565b600181811c908216806131ec57607f821691505b6020821081036111fb57634e487b7160e01b600052602260045260246000fd5b601f82111561245d57600081815260208120601f850160051c810160208610156132335750805b601f850160051c820191505b818110156132525782815560010161323f565b505050505050565b81516001600160401b0381111561327357613273612906565b6132878161328184546131d8565b8461320c565b602080601f8311600181146132bc57600084156132a45750858301515b600019600386901b1c1916600185901b178555613252565b600085815260208120601f198616915b828110156132eb578886015182559484019460019091019084016132cc565b50858210156133095787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60408152600061332c604083018561313e565b905060018060a01b03831660208301529392505050565b6001600160a01b03841681526060602082018190526000906133679083018561313e565b905063ffffffff83166040830152949350505050565b6020808252600f908201526e1d5b9b1a5b9ad959081dd85b1b195d608a1b604082015260600190565b60208082526010908201526f18985b185b98d948195e18d95959195960821b604082015260600190565b6020808252601290820152711c1c9bdd9a59195c881b9bdd08199bdd5b9960721b604082015260600190565b602081526000612a74602083018461313e565b60006020828403121561342157600080fd5b8151612a7481612a47565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610c1057610c1061342c565b81810381811115610c1057610c1061342c565b60008261348957634e487b7160e01b600052601260045260246000fd5b500490565b600081518084526020808501945080840160005b83811015612f2f5781516001600160401b0316875295820195908201906001016134a2565b600081518084526020808501808196508360051b8101915082860160005b8581101561350f5782840389526134fd84835161313e565b988501989350908401906001016134e5565b5091979650505050505050565b60006101208083526135308184018d61313e565b9050602083820381850152613545828d61348e565b91508382036040850152613559828c6134c7565b9150838203606085015261356d828b6134c7565b91508382036080850152613581828a612eff565b84810360a08601528851808252828a0193509082019060005b818110156135ba57845161ffff168352938301939183019160010161359a565b505084810360c08601526135ce8189612eff565b9250505082810360e08401526135e48186612eff565b90508281036101008401526135f98185612eff565b9c9b505050505050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000600182016136315761363161342c565b5060010190565b60e08152600061364b60e083018a61313e565b60208382038185015261365e828b61348e565b91508382036040850152613672828a6134c7565b9150838203606085015261368682896134c7565b8481036080860152875180825282890193509082019060005b818110156136c157845163ffffffff168352938301939183019160010161369f565b505084810360a08601526136d58188612eff565b93505050506136ec60c083018463ffffffff169052565b98975050505050505050565b61ffff8181168382160190808211156137135761371361342c565b5092915050565b60006020828403121561372c57600080fd5b5051919050565b606081526000613746606083018661313e565b60208301949094525060400152919050565b80820180821115610c1057610c1061342c565b60a08152600061377e60a083018861313e565b6001600160a01b03969096166020830152506040810193909352606083019190915261ffff16608090910152919050565b6060815260006137c2606083018661313e565b6001600160a01b039490941660208301525060400152919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea26469706673582212202c7b8c053d0fa5a05c83375d6832884be81e23e907a7e56687e50865f27ad9b164736f6c63430008130033";

    public static final String FUNC_AVAILABLEFORCLAIM = "availableForClaim";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BALANCESOF = "balancesOf";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_BURNINGCOMPENSATIONCOEF = "burningCompensationCoef";

    public static final String FUNC_BURNINGREWARDCOEF = "burningRewardCoef";

    public static final String FUNC_CLAIM = "claim";

    public static final String FUNC_COMPUTEBURNSERIESHASH = "computeBurnSeriesHash";

    public static final String FUNC_COMPUTELINKINGHASH = "computeLinkingHash";

    public static final String FUNC_DELETEPROVIDER = "deleteProvider";

    public static final String FUNC_DEPOSIT = "deposit";

    public static final String FUNC_DISCOUNTS = "discounts";

    public static final String FUNC_EMULATEBURN = "emulateBurn";

    public static final String FUNC_FARMING = "farming";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_ISREGISTEREDPROVIDER = "isRegisteredProvider";

    public static final String FUNC_ISREGISTEREDUSER = "isRegisteredUser";

    public static final String FUNC_LINKWALLET = "linkWallet";

    public static final String FUNC_LINKEDWALLETFORPROVIDER = "linkedWalletForProvider";

    public static final String FUNC_LINKEDWALLETFORUSER = "linkedWalletForUser";

    public static final String FUNC_LOYALTYDISCOUNT = "loyaltyDiscount";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_REGISTERPROVIDER = "registerProvider";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SETBURNINGREWARDCOEF = "setBurningRewardCoef";

    public static final String FUNC_SETFARMING = "setFarming";

    public static final String FUNC_SETTRUSTEDSIGNER = "setTrustedSigner";

    public static final String FUNC_TOKEN = "token";

    public static final String FUNC_TOTALDISCOUNT = "totalDiscount";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_TRUSTEDSIGNER = "trustedSigner";

    public static final String FUNC_UNLINKWALLET = "unlinkWallet";

    public static final String FUNC_VOLUMEDISCOUNT = "volumeDiscount";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final String FUNC_WITHDRAWALL = "withdrawAll";

    public static final Event BURN_EVENT = new Event("Burn",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Uint64>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint16>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
    ;

    public static final Event CLAIM_EVENT = new Event("Claim",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DELETEPROVIDER_EVENT = new Event("DeleteProvider",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event DEPOSIT_EVENT = new Event("Deposit",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event INITIALIZED_EVENT = new Event("Initialized",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
    ;

    public static final Event LINKWALLET_EVENT = new Event("LinkWallet",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event REGISTERPROVIDER_EVENT = new Event("RegisterProvider",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event UNLINKWALLET_EVENT = new Event("UnlinkWallet",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event WITHDRAW_EVENT = new Event("Withdraw",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected RivadaCoreContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected RivadaCoreContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected RivadaCoreContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected RivadaCoreContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<BurnEventResponse> getBurnEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(BURN_EVENT, transactionReceipt);
        ArrayList<BurnEventResponse> responses = new ArrayList<BurnEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BurnEventResponse typedResponse = new BurnEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.seriesID = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.batchIDs = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
            typedResponse.userIDs = (List<String>) ((Array) eventValues.getNonIndexedValues().get(2)).getNativeValueCopy();
            typedResponse.providerIDs = (List<String>) ((Array) eventValues.getNonIndexedValues().get(3)).getNativeValueCopy();
            typedResponse.burnAmounts = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(4)).getNativeValueCopy();
            typedResponse.discounts = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(5)).getNativeValueCopy();
            typedResponse.rewardAmounts = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(6)).getNativeValueCopy();
            typedResponse.feeCompensationAmounts = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(7)).getNativeValueCopy();
            typedResponse.balancesAfter = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(8)).getNativeValueCopy();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<Optional<BurnEventResponse>> burnEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, Optional<BurnEventResponse>>() {
            @SuppressWarnings("unchecked")
            @Override
            public Optional<BurnEventResponse> apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BURN_EVENT, log);
                if (isNull(eventValues)) {
                    return Optional.empty();
                }
                BurnEventResponse typedResponse = new BurnEventResponse();
                typedResponse.log = log;
                typedResponse.seriesID = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.batchIDs = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
                typedResponse.userIDs = (List<String>) ((Array) eventValues.getNonIndexedValues().get(2)).getNativeValueCopy();
                typedResponse.providerIDs = (List<String>) ((Array) eventValues.getNonIndexedValues().get(3)).getNativeValueCopy();
                typedResponse.burnAmounts = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(4)).getNativeValueCopy();
                typedResponse.discounts = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(5)).getNativeValueCopy();
                typedResponse.rewardAmounts = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(6)).getNativeValueCopy();
                typedResponse.feeCompensationAmounts = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(7)).getNativeValueCopy();
                typedResponse.balancesAfter = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(8)).getNativeValueCopy();
                return Optional.of(typedResponse);
            }
        });
    }

    public Flowable<Optional<BurnEventResponse>> burnEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BURN_EVENT));
        return burnEventFlowable(filter);
    }

    public static List<ClaimEventResponse> getClaimEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(CLAIM_EVENT, transactionReceipt);
        ArrayList<ClaimEventResponse> responses = new ArrayList<ClaimEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ClaimEventResponse typedResponse = new ClaimEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.providerID = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.providerWallet = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<Optional<ClaimEventResponse>> claimEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, Optional<ClaimEventResponse>>() {
            @Override
            public Optional<ClaimEventResponse> apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(CLAIM_EVENT, log);
                if (isNull(eventValues)) {
                    return Optional.empty();
                }
                ClaimEventResponse typedResponse = new ClaimEventResponse();
                typedResponse.log = log;
                typedResponse.providerID = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.providerWallet = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return Optional.of(typedResponse);
            }
        });
    }

    public Flowable<Optional<ClaimEventResponse>> claimEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CLAIM_EVENT));
        return claimEventFlowable(filter);
    }

    public static List<DeleteProviderEventResponse> getDeleteProviderEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(DELETEPROVIDER_EVENT, transactionReceipt);
        ArrayList<DeleteProviderEventResponse> responses = new ArrayList<DeleteProviderEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DeleteProviderEventResponse typedResponse = new DeleteProviderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.providerID = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.providerWallet = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<Optional<DeleteProviderEventResponse>> deleteProviderEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, Optional<DeleteProviderEventResponse>>() {
            @Override
            public Optional<DeleteProviderEventResponse> apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(DELETEPROVIDER_EVENT, log);
                if (isNull(eventValues)) {
                    return Optional.empty();
                }
                DeleteProviderEventResponse typedResponse = new DeleteProviderEventResponse();
                typedResponse.log = log;
                typedResponse.providerID = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.providerWallet = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return Optional.of(typedResponse);
            }
        });
    }

    public Flowable<Optional<DeleteProviderEventResponse>> deleteProviderEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DELETEPROVIDER_EVENT));
        return deleteProviderEventFlowable(filter);
    }

    public static List<DepositEventResponse> getDepositEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(DEPOSIT_EVENT, transactionReceipt);
        ArrayList<DepositEventResponse> responses = new ArrayList<DepositEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositEventResponse typedResponse = new DepositEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.userID = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.wallet = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.balanceAfter = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.discountAfter = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<Optional<DepositEventResponse>> depositEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, Optional<DepositEventResponse>>() {
            @Override
            public Optional<DepositEventResponse> apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSIT_EVENT, log);
                if (isNull(eventValues)) {
                    return Optional.empty();
                }
                DepositEventResponse typedResponse = new DepositEventResponse();
                typedResponse.log = log;
                typedResponse.userID = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.wallet = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.balanceAfter = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.discountAfter = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                return Optional.of(typedResponse);
            }
        });
    }

    public Flowable<Optional<DepositEventResponse>> depositEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSIT_EVENT));
        return depositEventFlowable(filter);
    }

    public static List<InitializedEventResponse> getInitializedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INITIALIZED_EVENT, transactionReceipt);
        ArrayList<InitializedEventResponse> responses = new ArrayList<InitializedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InitializedEventResponse typedResponse = new InitializedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, InitializedEventResponse>() {
            @Override
            public InitializedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(INITIALIZED_EVENT, log);
                InitializedEventResponse typedResponse = new InitializedEventResponse();
                typedResponse.log = log;
                typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INITIALIZED_EVENT));
        return initializedEventFlowable(filter);
    }

    public static List<LinkWalletEventResponse> getLinkWalletEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(LINKWALLET_EVENT, transactionReceipt);
        ArrayList<LinkWalletEventResponse> responses = new ArrayList<LinkWalletEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LinkWalletEventResponse typedResponse = new LinkWalletEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.userID = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.wallet = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<Optional<LinkWalletEventResponse>> linkWalletEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, Optional<LinkWalletEventResponse>>() {
            @Override
            public Optional<LinkWalletEventResponse> apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LINKWALLET_EVENT, log);
                if (isNull(eventValues)) {
                    return Optional.empty();
                }
                LinkWalletEventResponse typedResponse = new LinkWalletEventResponse();
                typedResponse.log = log;
                typedResponse.userID = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.wallet = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return Optional.of(typedResponse);
            }
        });
    }

    public Flowable<Optional<LinkWalletEventResponse>> linkWalletEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LINKWALLET_EVENT));
        return linkWalletEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<RegisterProviderEventResponse> getRegisterProviderEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REGISTERPROVIDER_EVENT, transactionReceipt);
        ArrayList<RegisterProviderEventResponse> responses = new ArrayList<RegisterProviderEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RegisterProviderEventResponse typedResponse = new RegisterProviderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.providerID = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.providerWallet = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RegisterProviderEventResponse> registerProviderEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RegisterProviderEventResponse>() {
            @Override
            public RegisterProviderEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(REGISTERPROVIDER_EVENT, log);
                RegisterProviderEventResponse typedResponse = new RegisterProviderEventResponse();
                typedResponse.log = log;
                typedResponse.providerID = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.providerWallet = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RegisterProviderEventResponse> registerProviderEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REGISTERPROVIDER_EVENT));
        return registerProviderEventFlowable(filter);
    }

    public static List<UnlinkWalletEventResponse> getUnlinkWalletEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UNLINKWALLET_EVENT, transactionReceipt);
        ArrayList<UnlinkWalletEventResponse> responses = new ArrayList<UnlinkWalletEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnlinkWalletEventResponse typedResponse = new UnlinkWalletEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.userID = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.wallet = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<Optional<UnlinkWalletEventResponse>> unlinkWalletEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, Optional<UnlinkWalletEventResponse>>() {
            @Override
            public Optional<UnlinkWalletEventResponse> apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UNLINKWALLET_EVENT, log);
                if (isNull(eventValues)) {
                    return Optional.empty();
                }
                UnlinkWalletEventResponse typedResponse = new UnlinkWalletEventResponse();
                typedResponse.log = log;
                typedResponse.userID = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.wallet = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return Optional.of(typedResponse);
            }
        });
    }

    public Flowable<Optional<UnlinkWalletEventResponse>> unlinkWalletEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNLINKWALLET_EVENT));
        return unlinkWalletEventFlowable(filter);
    }

    public static List<WithdrawEventResponse> getWithdrawEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(WITHDRAW_EVENT, transactionReceipt);
        ArrayList<WithdrawEventResponse> responses = new ArrayList<WithdrawEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawEventResponse typedResponse = new WithdrawEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.userID = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.wallet = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.balanceAfter = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.discountAfter = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<Optional<WithdrawEventResponse>> withdrawEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, Optional<WithdrawEventResponse>>() {
            @Override
            public Optional<WithdrawEventResponse> apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(WITHDRAW_EVENT, log);
                if (isNull(eventValues)) {
                    return Optional.empty();
                }
                WithdrawEventResponse typedResponse = new WithdrawEventResponse();
                typedResponse.log = log;
                typedResponse.userID = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.wallet = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.balanceAfter = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.discountAfter = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                return Optional.of(typedResponse);
            }
        });
    }

    public Flowable<Optional<WithdrawEventResponse>> withdrawEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAW_EVENT));
        return withdrawEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> availableForClaim(String provider) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_AVAILABLEFORCLAIM,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(provider)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String userID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(userID)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> balancesOf(List<String> userIDs) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCESOF,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                        org.web3j.abi.datatypes.Utf8String.class,
                        org.web3j.abi.Utils.typeMap(userIDs, org.web3j.abi.datatypes.Utf8String.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> burn(String seriesID, List<BigInteger> batchIDs, List<String> userIDs, List<String> providerIDs, List<BigInteger> usedMBs, List<BigInteger> burnRates, BigInteger expiredAt, byte[] signature) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURN,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(seriesID),
                        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint64>(
                                org.web3j.abi.datatypes.generated.Uint64.class,
                                org.web3j.abi.Utils.typeMap(batchIDs, org.web3j.abi.datatypes.generated.Uint64.class)),
                        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                                org.web3j.abi.datatypes.Utf8String.class,
                                org.web3j.abi.Utils.typeMap(userIDs, org.web3j.abi.datatypes.Utf8String.class)),
                        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                                org.web3j.abi.datatypes.Utf8String.class,
                                org.web3j.abi.Utils.typeMap(providerIDs, org.web3j.abi.datatypes.Utf8String.class)),
                        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint32>(
                                org.web3j.abi.datatypes.generated.Uint32.class,
                                org.web3j.abi.Utils.typeMap(usedMBs, org.web3j.abi.datatypes.generated.Uint32.class)),
                        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                                org.web3j.abi.datatypes.generated.Uint256.class,
                                org.web3j.abi.Utils.typeMap(burnRates, org.web3j.abi.datatypes.generated.Uint256.class)),
                        new org.web3j.abi.datatypes.generated.Uint32(expiredAt),
                        new org.web3j.abi.datatypes.DynamicBytes(signature)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> burningCompensationCoef() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BURNINGCOMPENSATIONCOEF,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> burningRewardCoef() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BURNINGREWARDCOEF,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> claim(BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CLAIM,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> computeBurnSeriesHash(String seriesID, List<BigInteger> batchIDs, List<String> userIDs, List<String> providerIDs, List<BigInteger> usedMBs, List<BigInteger> burnRates, BigInteger expiredAt) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_COMPUTEBURNSERIESHASH,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(seriesID),
                        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint64>(
                                org.web3j.abi.datatypes.generated.Uint64.class,
                                org.web3j.abi.Utils.typeMap(batchIDs, org.web3j.abi.datatypes.generated.Uint64.class)),
                        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                                org.web3j.abi.datatypes.Utf8String.class,
                                org.web3j.abi.Utils.typeMap(userIDs, org.web3j.abi.datatypes.Utf8String.class)),
                        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                                org.web3j.abi.datatypes.Utf8String.class,
                                org.web3j.abi.Utils.typeMap(providerIDs, org.web3j.abi.datatypes.Utf8String.class)),
                        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint32>(
                                org.web3j.abi.datatypes.generated.Uint32.class,
                                org.web3j.abi.Utils.typeMap(usedMBs, org.web3j.abi.datatypes.generated.Uint32.class)),
                        new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                                org.web3j.abi.datatypes.generated.Uint256.class,
                                org.web3j.abi.Utils.typeMap(burnRates, org.web3j.abi.datatypes.generated.Uint256.class)),
                        new org.web3j.abi.datatypes.generated.Uint32(expiredAt)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> computeLinkingHash(String wallet, String userID, BigInteger expiredAt) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_COMPUTELINKINGHASH,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, wallet),
                        new org.web3j.abi.datatypes.Utf8String(userID),
                        new org.web3j.abi.datatypes.generated.Uint32(expiredAt)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> deleteProvider(String providerID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DELETEPROVIDER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(providerID)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deposit(BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DEPOSIT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> discounts() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DISCOUNTS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>> emulateBurn(String userID, BigInteger usedMB, BigInteger burnRate, BigInteger discount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_EMULATEBURN,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(userID),
                        new org.web3j.abi.datatypes.generated.Uint32(usedMB),
                        new org.web3j.abi.datatypes.generated.Uint256(burnRate),
                        new org.web3j.abi.datatypes.generated.Uint16(discount)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<String> farming() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_FARMING,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(String _token, String _trustedSigner, String _discounts, String _farming, BigInteger _burningRewardCoef, BigInteger _burningCompensationCoef) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _token),
                        new org.web3j.abi.datatypes.Address(160, _trustedSigner),
                        new org.web3j.abi.datatypes.Address(160, _discounts),
                        new org.web3j.abi.datatypes.Address(160, _farming),
                        new org.web3j.abi.datatypes.generated.Uint16(_burningRewardCoef),
                        new org.web3j.abi.datatypes.generated.Uint16(_burningCompensationCoef)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isRegisteredProvider(String providerID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISREGISTEREDPROVIDER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(providerID)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isRegisteredUser(String userID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISREGISTEREDUSER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(userID)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> linkWallet(String userID, BigInteger expiredAt, byte[] signature) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_LINKWALLET,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(userID),
                        new org.web3j.abi.datatypes.generated.Uint32(expiredAt),
                        new org.web3j.abi.datatypes.DynamicBytes(signature)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> linkedWalletForProvider(String providerID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LINKEDWALLETFORPROVIDER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(providerID)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> linkedWalletForUser(String userID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LINKEDWALLETFORUSER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(userID)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> loyaltyDiscount(String userID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LOYALTYDISCOUNT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(userID)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> registerProvider(String providerID, String providerWallet) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REGISTERPROVIDER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(providerID),
                        new org.web3j.abi.datatypes.Address(160, providerWallet)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setBurningRewardCoef(BigInteger _burningRewardCoef) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETBURNINGREWARDCOEF,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint16(_burningRewardCoef)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setFarming(String _farming) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETFARMING,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _farming)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setTrustedSigner(String _trustedSigner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETTRUSTEDSIGNER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _trustedSigner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> token() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKEN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalDiscount(String userID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALDISCOUNT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(userID)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> trustedSigner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TRUSTEDSIGNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> unlinkWallet() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNLINKWALLET,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> volumeDiscount(String userID) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VOLUMEDISCOUNT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(userID)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> withdraw(BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAW,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawAll() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWALL,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static RivadaCoreContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new RivadaCoreContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static RivadaCoreContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new RivadaCoreContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static RivadaCoreContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new RivadaCoreContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static RivadaCoreContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new RivadaCoreContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<RivadaCoreContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(RivadaCoreContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<RivadaCoreContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(RivadaCoreContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<RivadaCoreContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(RivadaCoreContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<RivadaCoreContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(RivadaCoreContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class BurnEventResponse extends BaseEventResponse {
        public String seriesID;

        public List<BigInteger> batchIDs;

        public List<String> userIDs;

        public List<String> providerIDs;

        public List<BigInteger> burnAmounts;

        public List<BigInteger> discounts;

        public List<BigInteger> rewardAmounts;

        public List<BigInteger> feeCompensationAmounts;

        public List<BigInteger> balancesAfter;
    }

    public static class ClaimEventResponse extends BaseEventResponse {
        public String providerID;

        public String providerWallet;

        public BigInteger amount;
    }

    public static class DeleteProviderEventResponse extends BaseEventResponse {
        public String providerID;

        public String providerWallet;
    }

    public static class DepositEventResponse extends BaseEventResponse {
        public String userID;

        public String wallet;

        public BigInteger amount;

        public BigInteger balanceAfter;

        public BigInteger discountAfter;
    }

    public static class InitializedEventResponse extends BaseEventResponse {
        public BigInteger version;
    }

    public static class LinkWalletEventResponse extends BaseEventResponse {
        public String userID;

        public String wallet;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class RegisterProviderEventResponse extends BaseEventResponse {
        public String providerID;

        public String providerWallet;
    }

    public static class UnlinkWalletEventResponse extends BaseEventResponse {
        public String userID;

        public String wallet;
    }

    public static class WithdrawEventResponse extends BaseEventResponse {
        public String userID;

        public String wallet;

        public BigInteger amount;

        public BigInteger balanceAfter;

        public BigInteger discountAfter;
    }
}